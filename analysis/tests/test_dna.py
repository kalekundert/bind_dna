#!/usr/bin/env python3

import pytest
from bind_dna.dna import *
from pytest import approx, raises

def test_parse_protocol():
    p = parse_protocol("TEST: template=p1")
    assert p.method == 'TEST'
    assert p.params == {'template': 'p1'}

def test_parse_params():
    # No parameters
    assert parse_params('') == {}

    # One parameter
    assert parse_params('a=b') == {'a': 'b'}
    assert parse_params('a="b"') == {'a': 'b'}
    assert parse_params('a="b c"') == {'a': 'b c'}

    # Two parameters
    assert parse_params('a=b c=d') == {'a': 'b', 'c': 'd'}
    assert parse_params('a=b c="d"') == {'a': 'b', 'c': 'd'}
    assert parse_params('a=b c="d e"') == {'a': 'b', 'c': 'd e'}

    # Duplicate keys
    with raises(KeyError):
        parse_params('a=b a=c')

def test_parse_param():
    p = Protocol('PCR', {
        'template': 'p43',
        'primers': 'o67,o40',
    })
    assert p.parse_param('template', r'([fp]?\d+)') == ('p43',)
    assert p.parse_param('primers', r'([o]?\d+),([o]?\d+)') == ('o67', 'o40')

@pytest.mark.parametrize(
        'time_str, expected', [
            ('1s', 1),
            ('1 sec', 1),
            ('1 second', 1),
            ('2 seconds', 2),

            ('1m', 60),
            ('1 min', 60),
            ('1 minute', 60),
            ('2 minutes', 120),

            ('1h', 3600),
            ('1 hr', 3600),
            ('1 hour', 3600),
            ('2 hours', 7200),

            ('1m30', 90),
])
def test_parse_seconds(time_str, expected):
    assert parse_seconds(time_str) == expected

@pytest.mark.parametrize(
        'temp_str, expected', [
            ('60C', 60),
            ('60 C', 60),
            ('60°C', 60),
            ('60 °C', 60),
])
def test_parse_celsius(temp_str, expected):
    assert parse_celsius(temp_str) == expected

@pytest.mark.parametrize(
        'vol_str, expected', [
            ('1uL', 1),
            ('1 uL', 1),
            ('1µL', 1),
            ('1 µL', 1),
])
def test_parse_microliters(vol_str, expected):
    assert parse_microliters(vol_str) == expected

@pytest.mark.parametrize(
        'conc_str, mw, expected', [
            ('4nM',     1e6,      4),
            ('4 nM',    1e6,      4),

            ('4nM',     2e6,      4),
            ('4 nM',    2e6,      4),

            ('4uM',     1e6,   4000),
            ('4 uM',    1e6,   4000),
            ('4µM',     1e6,   4000),
            ('4 µM',    1e6,   4000),

            ('4uM',     2e6,   4000),
            ('4 uM',    2e6,   4000),
            ('4µM',     2e6,   4000),
            ('4 µM',    2e6,   4000),

            ('4ng/uL',  1e6,      4),
            ('4 ng/uL', 1e6,      4),
            ('4ng/µL',  1e6,      4),
            ('4 ng/µL', 1e6,      4),

            ('4ng/uL',  2e6,      2),
            ('4 ng/uL', 2e6,      2),
            ('4ng/µL',  2e6,      2),
            ('4 ng/µL', 2e6,      2),
])
def test_parse_nanomolar(conc_str, mw, expected):
    assert parse_nanomolar(conc_str, mw) == expected


def test_pcr_protocol():
    p = parse_protocol('PCR: template=p43 primers=o67,o40 Ta=63°C')

    assert p.template_tag == 'p43'
    assert p.primer_tags == ('o67', 'o40')
    assert p.product_seq == 'TGACGTCTAAGAAACGCGTAATACGACTCACTATAGGGCTTAAGTATAAGGAGGAAAAAATATGGTGAGCAAAGGCGAAGAAACCACCATGGGCGTGATTAAACCGGATATGAAAATTAAACTGAAAATGGAAGGCAACGTGAACGGCCATGCGTTTGTGATTGAAGGCGAAGGCGAAGGCAAACCGTATGATGGCACCAACACCATTAATCTGGAAGTGAAAGAAGGCGCGCCGCTGCCGTTTAGCTATGATATTCTGACCACCGCGTTTAGCTATGGCAACCGTGCGTTTACCAAATATCCGGATGATATTCCGAACTATTTTAAACAGAGCTTTCCGGAAGGCTATAGCTGGGAACGTACCATGACCTTTGAAGATAAAGGCATTGTGAAAGTGAAAAGCGATATTAGCATGGAAGAAGATAGCTTTATTTATGAAATTCATCTGAAAGGCGAGAACTTTCCGCCGAACGGCCCGGTGATGCAGAAAGAAACCACCGGCTGGGATGCGAGCACCGAACGTATGTATGTGCGTGATGGCGTGCTGAAAGGTGATGTGAAAATGAAACTGCTGCTGGAAGGCGGCGGCCATCATCGTGTGGATTTTAAAACCATTTATCGTGCGAAAAAAGCGGTGAAACTGCCGGATTATCATTTTGTGGATCATCGTATTGAAATTCTGAACCATGATAAAGATTATAACAAAGTGACCGTGTATGAAATTGCGGTGGCGCGTAACAGCACCGATGGCATGGATGAACTGTATAAATGACTAGCATAACCCCTCTCTAAACGGAGGGGTTT'
    assert p.product_len == 804
    assert p.annealing_temp_celsius == approx(63)
    assert p.extension_time_seconds == 30

def test_ivt_protocol():
    p = parse_protocol('IVT: template=f2')

    assert p.template_tag == 'f2'
    assert p.template_seq == 'GCTTCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGAGCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGCTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACGCGTAATACGACTCACTATAGGGCTTAAGTATAAGGAGGAAAAAATATGGAACGTCCGTATGCGTGTCCGGTGGAAAGCTGCGATCGTCGTTTTAGCCGTTCTGATGAACTGACCCGTCATATTCGTATTCATACCGGCCAGAAACCGTTTCAGTGCCGTATTTGCATGCGTAACTTTAGCCGTAGCGATCATCTGACCACCCATATTCGTACCCATACCGGCGAAAAACCGTTTGCGTGCGATATTTGCGGCCGTAAATTTGCGCGTTCTGATGAACGTAAACGTCATACCAAAATTCATCTGCGTCAGAAAGATGGCGGAGGTGGCTCTGGCGGTGGCGGATCGCACCACCATCACCATCATGGGGGAGGAGGATCAGGCTCAAGGGCGGGGGGCGGCGGGGAAAA'
    assert p.product_seq == 'GGGCUUAAGUAUAAGGAGGAAAAAAUAUGGAACGUCCGUAUGCGUGUCCGGUGGAAAGCUGCGAUCGUCGUUUUAGCCGUUCUGAUGAACUGACCCGUCAUAUUCGUAUUCAUACCGGCCAGAAACCGUUUCAGUGCCGUAUUUGCAUGCGUAACUUUAGCCGUAGCGAUCAUCUGACCACCCAUAUUCGUACCCAUACCGGCGAAAAACCGUUUGCGUGCGAUAUUUGCGGCCGUAAAUUUGCGCGUUCUGAUGAACGUAAACGUCAUACCAAAAUUCAUCUGCGUCAGAAAGAUGGCGGAGGUGGCUCUGGCGGUGGCGGAUCGCACCACCAUCACCAUCAUGGGGGAGGAGGAUCAGGCUCAAGGGCGGGGGGCGGCGGGGAAAA'

def test_digest_protocol():
    p = parse_protocol('RE: template=p49 enzyme=XmnI')

    assert p.template_tag == 'p49'
    assert p.enzyme_name == 'XmnI'
    assert p.product_seq == 'GCTTCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGAGCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGCTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACGCGTAATACGACTCACTATAGGGCTTAAGTATAAGGAGGAAAAAATATGGAACGTCCGTATGCGTGTCCGGTGGAAAGCTGCGATCGTCGTTTTAGCCGTTCTGATGAACTGACCCGTCATATTCGTATTCATACCGGCCAGAAACCGTTTCAGTGCCGTATTTGCATGCGTAACTTTAGCCGTAGCGATCATCTGACCACCCATATTCGTACCCATACCGGCGAAAAACCGTTTGCGTGCGATATTTGCGGCCGTAAATTTGCGCGTTCTGATGAACGTAAACGTCATACCAAAATTCATCTGCGTCAGAAAGATGGCGGAGGTGGCTCTGGCGGTGGCGGATCGCACCACCATCACCATCATGGGGGAGGAGGATCAGGCTCAAGGGCGGGGGGCGGCGGGGAAAA'

def test_golden_gate_protocol():
    p = parse_protocol('GG: bb=p47 ins=f29,f30')

    assert p.backbone_tag == 'p47'
    assert p.insert_tags == ['f29', 'f30']
    assert p.enzyme_name == 'BsaI'


def test_get_plasmid_seq():
    assert get_plasmid_seq('p2')   == 'TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATATGCGGTGTGAAATACCGCACAGATGCGTAAGGAGAAAATACCGCATCAGGCGCCATTCGCCATTCAGGCTGCGCAACTGTTGGGAAGGGCGATCGGTGCGGGCCTCTTCGCTATTACGCCAGCTGGCGAAAGGGGGATGTGCTGCAAGGCGATTAAGTTGGGTAACGCCAGGGTTTTCCCAGTCACGACGTTGTAAAACGACGGCCAGTGAATTCGAGCTCGGTACCCGGGGATCCTCTAGAGTCGACCTGCAGGCATGCAAGCTTGGCGTAATCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACCATTATTATCATGACATTAACCTATAAAAATAGGCGTATCACGAGGCCCTTTCGTC'
    assert get_plasmid_seq('p002') == 'TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATATGCGGTGTGAAATACCGCACAGATGCGTAAGGAGAAAATACCGCATCAGGCGCCATTCGCCATTCAGGCTGCGCAACTGTTGGGAAGGGCGATCGGTGCGGGCCTCTTCGCTATTACGCCAGCTGGCGAAAGGGGGATGTGCTGCAAGGCGATTAAGTTGGGTAACGCCAGGGTTTTCCCAGTCACGACGTTGTAAAACGACGGCCAGTGAATTCGAGCTCGGTACCCGGGGATCCTCTAGAGTCGACCTGCAGGCATGCAAGCTTGGCGTAATCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACCATTATTATCATGACATTAACCTATAAAAATAGGCGTATCACGAGGCCCTTTCGTC'

def test_get_fragment_seq():
    # PCR --- no overhang
    assert get_fragment_seq('f3')   == 'TGACGTCTAAGAAACGCGTTGACAATTAATCATCGGCTCGTATAATGCTTAAGTATAAGGAGGAAAAAATATGGCTAGCTGGAGCCACCCGCAGTTCGAAAAAGGCGCCGTGAGCAAAGGCGAAGAAACCACCATGGGCGTGATTAAACCGGATATGAAAATTAAACTGAAAATGGAAGGCAACGTGAACGGCCATGCGTTTGTGATTGAAGGCGAAGGCGAAGGCAAACCGTATGATGGCACCAACACCATTAATCTGGAAGTGAAAGAAGGCGCGCCGCTGCCGTTTAGCTATGATATTCTGACCACCGCGTTTAGCTATGGCAACCGTGCGTTTACCAAATATCCGGATGATATTCCGAACTATTTTAAACAGAGCTTTCCGGAAGGCTATAGCTGGGAACGTACCATGACCTTTGAAGATAAAGGCATTGTGAAAGTGAAAAGCGATATTAGCATGGAAGAAGATAGCTTTATTTATGAAATTCATCTGAAAGGCGAGAACTTTCCGCCGAACGGCCCGGTGATGCAGAAAGAAACCACCGGCTGGGATGCGAGCACCGAACGTATGTATGTGCGTGATGGCGTGCTGAAAGGTGATGTGAAAATGAAACTGCTGCTGGAAGGCGGCGGCCATCATCGTGTGGATTTTAAAACCATTTATCGTGCGAAAAAAGCGGTGAAACTGCCGGATTATCATTTTGTGGATCATCGTATTGAAATTCTGAACCATGATAAAGATTATAACAAAGTGACCGTGTATGAAATTGCGGTGGCGCGTAACAGCACCGATGGCATGGATGAACTGTATAAAGGGGGAGGAGGATCAGCGGCCCCAACTGATCTTCACCAAACGTATTACCGGCAGGTAAAGAACCCGAATCCGGTGTTCACTCCCCGTGAAGGTGCCGGAACGCTGAAGTTCTGCGAAAAACTGATGGAAAAGGCGGTGGGCTTCACCTCCCGTTTTGATTTCGCCATTCATGTGGCGCATGCCCGTTCCCGTGGTCTGCGTCGGCGCATGCCACCGGTGCTGCGTCGACGGGCTATTGATGCGCTGCTGCAGGGGCTGTGTTTCCACTATGACCCGCTGGCCAACCGCGTCCAGTGTTCCATCACCACACTGGCCATTGAGTGCGGACTGGCGACAGAGTCCGGTGCAGGAAAACTCTCCATCACCCGTGCCACCCGGGCCCTGACGTTCCTGTCAGAGCTGGGACTGATTACCTACCAGACGGAATATGACCCGCTTATCGGGTGCTACATTCCGACCGACATCACGTTCACACTGGCTCTGTTTGCTGCCCTTGATGTGTCTGAGGATGCAGTGGCAGCTGCGCGCCGCAGTCGTGTTGAATGGGAAAACAAACAGCGCAAAAAGCAGGGGCTGGATACACTGGGTATGGATGAGCTGATAGCGAAAGCTTGGCGTTTTGTGCGTGAGCGTTTCCGCAGTTACCAGACAGAGCTTCAGTCCCGTGGAATAAAACGTGCCCGTGCGCGTCGTGATGCGAACAGAGAACGTCAGGACATCGTCACCCTAGTGAAACGGCAGCTGACGCGTGAAATCTCGGAAGGACGCTTCACTGCTAATGGTGAGGCGGTAAAACGCGAAGTGGAGCGTCGTGTGAAGGAGCGCATGATTCTGTCACGTAACCGCAATTACAGCCGGCTGGCCACAGCTTCTCCCTGAAAGTGATCTCCTCAGAATAATCCGGCCTGCGCCGGAGGCATCCGCACGCCTGAAGCCCGCCGGTGCACAAAAAAACAGCGTCGCATGCAAAAAACAATCTCATCATCCACCTTCTGGAGCATCCGATTCCCCCTGTTTTTAATACAAAATACGCCTCAGCGACGGGGAATTTTGCTTATCCACATTTAACTGCAAGGGACTTCCCCATAAGGTTACAACCGTTCATGTCATAAAGCGCCAGCCGCCAGTCTTACAGGGTGCAATGTATCTTTTAAACACCTGTTTATATCTCCTTTAAACTACTTAATTACATTCATTTAAAAAGAAAACCTATTCACTGCCTGTCCTGTGGACAGACAGGCTAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAG'
    assert get_fragment_seq('f003') == 'TGACGTCTAAGAAACGCGTTGACAATTAATCATCGGCTCGTATAATGCTTAAGTATAAGGAGGAAAAAATATGGCTAGCTGGAGCCACCCGCAGTTCGAAAAAGGCGCCGTGAGCAAAGGCGAAGAAACCACCATGGGCGTGATTAAACCGGATATGAAAATTAAACTGAAAATGGAAGGCAACGTGAACGGCCATGCGTTTGTGATTGAAGGCGAAGGCGAAGGCAAACCGTATGATGGCACCAACACCATTAATCTGGAAGTGAAAGAAGGCGCGCCGCTGCCGTTTAGCTATGATATTCTGACCACCGCGTTTAGCTATGGCAACCGTGCGTTTACCAAATATCCGGATGATATTCCGAACTATTTTAAACAGAGCTTTCCGGAAGGCTATAGCTGGGAACGTACCATGACCTTTGAAGATAAAGGCATTGTGAAAGTGAAAAGCGATATTAGCATGGAAGAAGATAGCTTTATTTATGAAATTCATCTGAAAGGCGAGAACTTTCCGCCGAACGGCCCGGTGATGCAGAAAGAAACCACCGGCTGGGATGCGAGCACCGAACGTATGTATGTGCGTGATGGCGTGCTGAAAGGTGATGTGAAAATGAAACTGCTGCTGGAAGGCGGCGGCCATCATCGTGTGGATTTTAAAACCATTTATCGTGCGAAAAAAGCGGTGAAACTGCCGGATTATCATTTTGTGGATCATCGTATTGAAATTCTGAACCATGATAAAGATTATAACAAAGTGACCGTGTATGAAATTGCGGTGGCGCGTAACAGCACCGATGGCATGGATGAACTGTATAAAGGGGGAGGAGGATCAGCGGCCCCAACTGATCTTCACCAAACGTATTACCGGCAGGTAAAGAACCCGAATCCGGTGTTCACTCCCCGTGAAGGTGCCGGAACGCTGAAGTTCTGCGAAAAACTGATGGAAAAGGCGGTGGGCTTCACCTCCCGTTTTGATTTCGCCATTCATGTGGCGCATGCCCGTTCCCGTGGTCTGCGTCGGCGCATGCCACCGGTGCTGCGTCGACGGGCTATTGATGCGCTGCTGCAGGGGCTGTGTTTCCACTATGACCCGCTGGCCAACCGCGTCCAGTGTTCCATCACCACACTGGCCATTGAGTGCGGACTGGCGACAGAGTCCGGTGCAGGAAAACTCTCCATCACCCGTGCCACCCGGGCCCTGACGTTCCTGTCAGAGCTGGGACTGATTACCTACCAGACGGAATATGACCCGCTTATCGGGTGCTACATTCCGACCGACATCACGTTCACACTGGCTCTGTTTGCTGCCCTTGATGTGTCTGAGGATGCAGTGGCAGCTGCGCGCCGCAGTCGTGTTGAATGGGAAAACAAACAGCGCAAAAAGCAGGGGCTGGATACACTGGGTATGGATGAGCTGATAGCGAAAGCTTGGCGTTTTGTGCGTGAGCGTTTCCGCAGTTACCAGACAGAGCTTCAGTCCCGTGGAATAAAACGTGCCCGTGCGCGTCGTGATGCGAACAGAGAACGTCAGGACATCGTCACCCTAGTGAAACGGCAGCTGACGCGTGAAATCTCGGAAGGACGCTTCACTGCTAATGGTGAGGCGGTAAAACGCGAAGTGGAGCGTCGTGTGAAGGAGCGCATGATTCTGTCACGTAACCGCAATTACAGCCGGCTGGCCACAGCTTCTCCCTGAAAGTGATCTCCTCAGAATAATCCGGCCTGCGCCGGAGGCATCCGCACGCCTGAAGCCCGCCGGTGCACAAAAAAACAGCGTCGCATGCAAAAAACAATCTCATCATCCACCTTCTGGAGCATCCGATTCCCCCTGTTTTTAATACAAAATACGCCTCAGCGACGGGGAATTTTGCTTATCCACATTTAACTGCAAGGGACTTCCCCATAAGGTTACAACCGTTCATGTCATAAAGCGCCAGCCGCCAGTCTTACAGGGTGCAATGTATCTTTTAAACACCTGTTTATATCTCCTTTAAACTACTTAATTACATTCATTTAAAAAGAAAACCTATTCACTGCCTGTCCTGTGGACAGACAGGCTAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAG'

    # I don't have an example with PCR overhangs yet.  That's definitely 
    # something I want to test, though.
    
    # Restriction digest
    assert get_fragment_seq('f2')   == 'GCTTCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGAGCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGCTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACGCGTAATACGACTCACTATAGGGCTTAAGTATAAGGAGGAAAAAATATGGAACGTCCGTATGCGTGTCCGGTGGAAAGCTGCGATCGTCGTTTTAGCCGTTCTGATGAACTGACCCGTCATATTCGTATTCATACCGGCCAGAAACCGTTTCAGTGCCGTATTTGCATGCGTAACTTTAGCCGTAGCGATCATCTGACCACCCATATTCGTACCCATACCGGCGAAAAACCGTTTGCGTGCGATATTTGCGGCCGTAAATTTGCGCGTTCTGATGAACGTAAACGTCATACCAAAATTCATCTGCGTCAGAAAGATGGCGGAGGTGGCTCTGGCGGTGGCGGATCGCACCACCATCACCATCATGGGGGAGGAGGATCAGGCTCAAGGGCGGGGGGCGGCGGGGAAAA'
    assert get_fragment_seq('f002') == 'GCTTCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGAGCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGCTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACGCGTAATACGACTCACTATAGGGCTTAAGTATAAGGAGGAAAAAATATGGAACGTCCGTATGCGTGTCCGGTGGAAAGCTGCGATCGTCGTTTTAGCCGTTCTGATGAACTGACCCGTCATATTCGTATTCATACCGGCCAGAAACCGTTTCAGTGCCGTATTTGCATGCGTAACTTTAGCCGTAGCGATCATCTGACCACCCATATTCGTACCCATACCGGCGAAAAACCGTTTGCGTGCGATATTTGCGGCCGTAAATTTGCGCGTTCTGATGAACGTAAACGTCATACCAAAATTCATCTGCGTCAGAAAGATGGCGGAGGTGGCTCTGGCGGTGGCGGATCGCACCACCATCACCATCATGGGGGAGGAGGATCAGGCTCAAGGGCGGGGGGCGGCGGGGAAAA'

    # In vitro transcription
    assert get_fragment_seq('f11')  == 'GGGCUUAAGUAUAAGGAGGAAAAAAUAUGGAACGUCCGUAUGCGUGUCCGGUGGAAAGCUGCGAUCGUCGUUUUAGCCGUUCUGAUGAACUGACCCGUCAUAUUCGUAUUCAUACCGGCCAGAAACCGUUUCAGUGCCGUAUUUGCAUGCGUAACUUUAGCCGUAGCGAUCAUCUGACCACCCAUAUUCGUACCCAUACCGGCGAAAAACCGUUUGCGUGCGAUAUUUGCGGCCGUAAAUUUGCGCGUUCUGAUGAACGUAAACGUCAUACCAAAAUUCAUCUGCGUCAGAAAGAUGGCGGAGGUGGCUCUGGCGGUGGCGGAUCGCACCACCAUCACCAUCAUGGGGGAGGAGGAUCAGGCUCAAGGGCGGGGGGCGGCGGGGAAAA'
    assert get_fragment_seq('f011') == 'GGGCUUAAGUAUAAGGAGGAAAAAAUAUGGAACGUCCGUAUGCGUGUCCGGUGGAAAGCUGCGAUCGUCGUUUUAGCCGUUCUGAUGAACUGACCCGUCAUAUUCGUAUUCAUACCGGCCAGAAACCGUUUCAGUGCCGUAUUUGCAUGCGUAACUUUAGCCGUAGCGAUCAUCUGACCACCCAUAUUCGUACCCAUACCGGCGAAAAACCGUUUGCGUGCGAUAUUUGCGGCCGUAAAUUUGCGCGUUCUGAUGAACGUAAACGUCAUACCAAAAUUCAUCUGCGUCAGAAAGAUGGCGGAGGUGGCUCUGGCGGUGGCGGAUCGCACCACCAUCACCAUCAUGGGGGAGGAGGAUCAGGCUCAAGGGCGGGGGGCGGCGGGGAAAA'

def test_get_oligo_seq():
    assert get_oligo_seq('10')   == 'AACGCGTAATACGACTCAC'
    assert get_oligo_seq('o010') == 'AACGCGTAATACGACTCAC'

    # Non-standard nucleotides
    assert get_oligo_seq('11')   == 'AACGCGTAATACGACTCAC'
    assert get_oligo_seq('o011') == 'AACGCGTAATACGACTCAC'

def test_get_oligo_tm():
    assert get_oligo_tm('o2') == approx(60)
    assert get_oligo_tm('o10') == approx(62)

def test_mw():
    # Expected values from: http://molbiotools.com/dnacalculator.html

    # dsDNA, circular
    assert get_mw('p2') == approx(1659684.16, rel=1e-3)

    # dsDNA, linear
    assert get_mw('f3') == approx(1338870.98, rel=1e-3)

    # ssDNA
    # The expected value from several online MW calculators is: 5765.78
    # Biopython seems to be off by about 80 Da.  It's actually closer for the 
    # longer sequences (e.g. within 5 Da or so).  I'm not sure what the problem 
    # is with ssDNA, but I'm pretty sure it's not on my end.
    assert get_mw('o10') == approx(5845.75, rel=1e-3)

    # RNA
    assert get_mw('f11') == approx(125265.64, rel=1e-3)


